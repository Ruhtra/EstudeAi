generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Discipline {
  id       String     @id
  name     String     @unique
  Question Question[]
}

model Exam {
  id         String     @id
  name       String
  year       Int
  position   String
  level      String
  isComplete Boolean    @default(false)
  createdAt  DateTime   @default(now())
  bank       String
  institute  String
  updatedAt  DateTime
  Question   Question[]
  Text       Text[]
}

model Question {
  id           String        @id
  examId       String
  disciplineId String
  statement    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  Alternative  Alternative[]
  Text         Text[]
  Discipline   Discipline    @relation(fields: [disciplineId], references: [id])
  Exam         Exam          @relation(fields: [examId], references: [id])
}

model Alternative {
  id         String   @id
  questionId String
  content    String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Question   Question @relation(fields: [questionId], references: [id])
}

enum ContentType {
  text
  image
}

model Text {
  id          String      @id
  number      String      @unique
  contentType ContentType
  content     String
  reference   String
  examId      String
  Exam        Exam        @relation(fields: [examId], references: [id])

  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  Question   Question[]
  questionId String?

  @@unique([number, examId])
}

enum UserRole {
  admin
  sup
  teacher
  student
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?

  imageurl  String?
  imageName String?

  passwordHash String? // Adicionando o campo passwordHash
  accounts     Account[]
  role         UserRole  @default(student)

  phone String  @unique
  //admin
  cpf   String? @unique
  //student
  state String?
  city  String?

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  // expires DateTime // for vlidatetime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
